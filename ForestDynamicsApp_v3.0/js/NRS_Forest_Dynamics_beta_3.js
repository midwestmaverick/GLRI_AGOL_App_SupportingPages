var map, layerSwipe, legend1, legend2, LegendGen, outData; var minPlots = 10; var liveData; var featureId = "FID"; var forestedValue = "Tot_ac"; var lyrMax = 0, maxLyrSum = 0; var mapLayers = []; var zoomRange = {min:5,max:10}; //symbol size range     //scale values function sV(obj,ld){ return obj[ld.valField]*ld.scalingFactor; }  //General utilities function componentToHex(c) { var hex = c.toString(16); return hex.length == 1 ? "0" + hex : hex; } function rgbToHex(col) { return "#" + componentToHex(col[0]) + componentToHex(col[1]) + componentToHex(col[2]); } function appendLyrScales(lyr){ lyr.valScale = d3.scale.linear() .domain([0,1]) .range(lyr.stops);  lyr.sizeScale = d3.scale.linear() .domain(lyr.stops) .range(lyr.symbolSizes);  lyr.colScale = d3.scale.linear() .domain(lyr.stops) .range(lyr.colors.map(function(d){return rgbToHex(d)})) } (function (){ layerDefs.map(function(d){appendLyrScales(d)}); })();  function scaleSymbSize(size){ return (size + (size * (map.getZoom() - map.getMinZoom())))*0.5; } function setColStops(l){ var stops = []; l.stops.map(function(d,i){ stops.push({"value":d,"color":new esri.Color(l.colors[i])}); }); return stops; } function genRange(start,stop,step){ var a = new Array(); for(var n = start; n <= stop; n+=step){a.push(n);} return a; } function getRange(array){ return d3.max(array)-d3.min(array); } function getRangeArray(array){ return [d3.min(array),d3.max(array)]; } function getDataRangeArray(data){ var min = 0; var max = 0; data.map(function(d){return d}); } function getLyrs(){ var lds = {"X":layerDefs.filter(function(d){return d.title == $("#lX").text()})[0], "Y":layerDefs.filter(function(d){return d.title == $("#lY").text()})[0]}; return lds; } function highlightPoints(id){ //console.log(id); var lds = getLyrs(); d3.select("#map_layers").selectAll("circle").filter(function(d){ if(this.getAttribute('data-'+featureId) == id){ return this; } }).attr("id","mapHighlight"); var cs = d3.selectAll(".dot").filter(function(d){return d[featureId] == id}).datum(); d3.select(".objects").append("circle").attr("id","chartHighlight").attr('r',r(cs.Fper)).attr("transform", transform(cs[lds.X.valField],cs[lds.Y.valField])); } function unhighlightPoints(){ d3.select("#map_layers").selectAll("circle").attr("id",""); d3.select("#chartHighlight").remove(); } function initMapHighlight(){ $("circle", $("#map_layers")).mouseover(function(){ highlightPoints(this.getAttribute("data-"+featureId)); }); $("circle", $("#map_layers")).mouseout(function(){unhighlightPoints();}); }  function initCounters(){ d3.select("#chartInfo").append("text").attr("x",400).attr("y",50).attr("id","forestCounter").style({"font-size":"200%"}).text("0000"); d3.select("#chartInfo").append("text").attr("x",400).attr("y",100).attr("id","xCounter").style({"font-size":"200%"}).text("0000"); d3.select("#chartInfo").append("text").attr("x",400).attr("y",150).attr("id","yCounter").style({"font-size":"200%"}).text("0000"); d3.select("#chartInfo").append("text").attr("x",600).attr("y",100).attr("id","xPer").style({"font-size":"200%"}).text("0000"); d3.select("#chartInfo").append("text").attr("x",600).attr("y",150).attr("id","yPer").style({"font-size":"200%"}).text("0000"); }  function updateIntCounter(counterId,newVal){ var oldVal = parseInt($(counterId).text()); d3.select(counterId).transition().duration(1000).tween("text",function(d){ var i = d3.interpolate(oldVal,newVal); return function(t) { d3.select(this).text(parseInt(i(t))); }; }); }  function updatePerCounter(counterId,newVal){ var fp = d3.format(".3%") oldVal = parseFloat($(counterId).text()) * 0.01; d3.select(counterId).transition().duration(1000).tween("text",function(d){ var i = d3.interpolate(oldVal,newVal); return function(t) { d3.select(this).text(fp(i(t))); }; }); }  function sumVar(){ var start = new Date().getTime(); var ext = map.extent; var lds = getLyrs() var vSum = { f:0, vx:0, vy:0 } map.getLayer("lyrX").graphics.filter(function(g){ return (inRange(g.geometry.x,[ext.xmin,ext.xmax]) && inRange(g.geometry.y,[ext.ymin,ext.ymax]) && inRange(sV(g.attributes,lds.X),x.domain()) && inRange(sV(g.attributes,lds.Y),y.domain())) }).map(function(c){ vSum.f += parseFloat(c.attributes.FF13ac + c.attributes.FO13ac); vSum.vx += parseFloat(c.attributes[lds.X.valField]); vSum.vy += parseFloat(c.attributes[lds.Y.valField]); }); console.log("filterChart time:" + parseInt(new Date().getTime() - start)); return vSum; }  function updateAllCounters(){ var lds = getLyrs() var vSum = sumVar(); updateIntCounter("#forestCounter",parseInt(vSum.f)); updateIntCounter("#xCounter",parseInt(vSum.vx)); updateIntCounter("#yCounter",parseInt(vSum.vy)); updatePerCounter("#xPer",vSum.vx/vSum.f); updatePerCounter("#yPer",vSum.vx/vSum.f); }  //Map functions function selectLayers(d){ console.log("select:"+d) var l = $("#l"+d).text(); var lds = getLyrs(); var ml = map.getLayer("lyr"+d); var markerSym = new esri.symbol.SimpleMarkerSymbol(); markerSym.outline.setWidth(0); markerSym.setSize(0); var r = new esri.renderer.SimpleRenderer(markerSym); r.setColorInfo({ field:lds[d].colField, stops:setColStops(lds[d]) }); ml.setRenderer(r); ml.redraw(); renderMapBasedOnChart(); customLegend($("#l"+d),lds[d].legendOrder); var dur = 1500; x.domain(getRangeArray(lds.X.minMax).map(function(d){return d*lds.X.scalingFactor})); y.domain(getRangeArray(lds.Y.minMax).map(function(d){return d*lds.Y.scalingFactor})); d3.selectAll(".dot").transition().duration(200).delay(function(d,i){return i*0.5}).attr("transform",function(d){return transform(sV(d,lds.X),sV(d,lds.Y))}); d3.select(".x.axis").transition().duration(1000).call(xAxis); d3.select(".y.axis").transition().duration(1000).call(yAxis); d3.select("#xAxisLabel").text(lds.X.title); d3.select("#yAxisLabel").text(lds.Y.title); zoomBeh.x(x); zoomBeh.y(y); updateAllCounters(); }  function swipeTransform(){ var w = $("body").width(); var h = $("#swipeHandle"); var l = h.position().left + (0.5 * h.width()); try{ var gl = $("#map_graphics_layer"); var t = gl[0].transform.animVal.getItem(0).matrix; var e = (t.e + 3)*-1; var f = t.f * -1; var cp1 = d3.select("#clip1rect") .attr("width",l) .attr("transform","translate("+e+","+f+")"); var cp2 = d3.select("#clip2rect") .attr("x",l) .attr("width",w-l) .attr("transform","translate("+e+","+f+")"); }catch(e){} } function initSwipe(){ var m = $("#map")[0]; var w = $("body").width(); var h = m.offsetHeight; var l = $("#swipeHandle").position().left;  var svg = d3.select("#map_gc");  var clip1 = svg.append("svg:clipPath") .attr("id","gfx_clip1") .append("svg:rect") .attr("id","clip1rect") .attr("x","0") .attr("y","0") .attr("width",l) .attr("height","100%");  var clip2 = svg.append("svg:clipPath") .attr("id","gfx_clip2") .append("svg:rect") .attr("id","clip2rect") .attr("x",l) .attr("y","0") .attr("width",w - l) .attr("height","100%");  $('#swipeHandle').draggable({axis:"x",containment: "parent",drag:swipeTransform})  var ht = h+$("#swipeBar").height()+10; $("#swipeZone").height(ht);  $("#lyrX_layer").attr("clip-path","url(#gfx_clip1)"); $("#lyrY_layer").attr("clip-path","url(#gfx_clip2)");  swipeTransform(); } function layerMaker(data,id){ var fs = new esri.tasks.FeatureSet(data); outData = fs;  var fc = { layerDefinition: { "geometryType": "esriGeometryPoint", "fields": fs.fields }, featureSet: fs }; var f = new esri.layers.FeatureLayer(fc,{ //outFields:layerDefs.map(function(d){return d.valField}), id:id, //styling:false, dataAttributes:["FID"] }); return f; }  function initLayers(data){ //console.log(data) f1 = layerMaker(data,"lyrX"); f2 = layerMaker(data,"lyrY"); var markerSym = new esri.symbol.SimpleMarkerSymbol(); markerSym.outline.setWidth(0); markerSym.setSize(0); var r1 = new esri.renderer.SimpleRenderer(markerSym); r1.setColorInfo({ field:layerDefs[0].colField, stops:setColStops(layerDefs[0]) }); f1.setRenderer(r1); var r2 = new esri.renderer.SimpleRenderer(markerSym); r2.setColorInfo({ field:layerDefs[1].colField, stops:setColStops(layerDefs[1]) }); f1.setRenderer(r1); f2.setRenderer(r2); map.addLayers([f1,f2]); var chartData = data.features.map(function(d){ var featureData = d.attributes; featureData.mx = d.geometry.x; featureData.my = d.geometry.y; return featureData; }); console.log(chartData); initChart(chartData); initCounters(); }  function customLegend(l,d){ var xLeft = 40; var lt = l.text(); var ld = layerDefs.filter(function(d) {return d.title == lt})[0]; if(ld.stops.length == 2){ var r = genRange(0,1,0.25).map(function(r){return {value:parseInt(ld.valScale(r)),size:parseInt(ld.sizeScale(ld.valScale(r))),color:ld.colScale(ld.valScale(r))}}); }else{ var r = ld.stops.map(function(d,i){return {value:d,size:ld.symbolSizes[i],color:ld.colScale(d)}}); } var p = "#"+l.parent().parent().attr("id");  if(d == "reverse"){ r = r.reverse(); }  d3.select(p).selectAll("svg").remove();  var svg = d3.select(p) .append('svg') .attr("class","svgL");  svg.append("text") .attr("x",xLeft) .attr("y",20) .attr("font-size","20px") .attr("font-weight","bold") .style("text-anchor","midde") .text(ld.legendDef)  svg.selectAll(".lgndPt") .data(r) .enter() .append("circle") .attr("class","lgndPt") .attr("r",function(d){return d.size * 0.5}) .attr("cx",xLeft + 10) .attr("cy",function(d,i){return 3 + (i+1)* 40}) .attr("fill",function(d){return d.color}) .style('opacity',colAlpha);  svg.selectAll(".lgndTxt") .data(r) .enter() .append("text") .attr("class","lgndTxt") .attr("x",xLeft + 30) .attr("y",function(d,i){return 3 + (i+1) * 40}) .attr("dy","0.35em") .text(function(d){return d.value * ld.scalingFactor});  } function scaleLegend(){ d3.selectAll(".lgndPt").transition().duration(300).attr('r',function(d){ return scaleSymbSize(d.size); }); }  function filterChartBasedOnMap(){ var ext = map.extent; d3.selectAll(".dot").transition().duration(300).attr("r", function(n){ if(inRange(n.mx,[ext.xmin,ext.xmax]) && inRange(n.my,[ext.ymin,ext.ymax])){ return r(n.Fper); }else{ return 0; } }); }  function renderMapBasedOnChart(){ var ls = ['X','Y']; var lds = getLyrs(); var ext = map.extent; ls.map(function(l,i){ map.getLayer("lyr"+l).graphics.map(function(g){ var vX = sV(g.attributes,lds.X); var vY = sV(g.attributes,lds.Y); if(inRange(g.geometry.x,[ext.xmin,ext.xmax]) && inRange(g.geometry.y,[ext.ymin,ext.ymax])){ if(inRange(vX,x.domain()) && inRange(vY,y.domain())){ var r = parseInt(scaleSymbSize(lds[l].sizeScale(g.attributes[lds[l].valField]))); g.getNode().setAttribute('r',r); }else{ g.getNode().setAttribute('r',0); } } }); }); } function getData(){ $.getJSON("json/conus_emap_hexes.json", function(data){ data.features = data.features.filter(function(d) {return ((d.attributes.FF13_plots + d.attributes.FO13_plots > minPlots) || (d.attributes.FF13_plots + d.attributes.OF13_plots > minPlots))}); initLayers(data); }); }  //build map require([ "esri/map", "esri/basemaps", "esri/geometry/Extent", "esri/dijit/HomeButton","esri/layers/FeatureLayer", "esri/urlUtils", "dojo/domReady!" ], function( Map, esriBasemaps, Extent, HomeButton, FeatureLayer, urlUtils ) {  //define basemap *no reference layer!* esriBasemaps.lightGray = { baseMapLayers: [{url:"http://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Light_Gray_Base/MapServer"}], title: "lightGray" };  //initiate map map = new Map("map", { basemap: "lightGray", center: [-82.45, 38.75], // longitude, latitude zoom: 5, minZoom:zoomRange.min, maxZoom:zoomRange.max }); map.on("load",function(){ getData(); initCounters(); });  //add home button to map var home = new HomeButton({ map: map }, "HomeButton"); home.startup();  //do stuff after layers are added map.on("layers-add-result",function(lyrs){ //console.log(map.graphicsLayerIds); var mapWidth = $("#map").width(); var swipePos = parseInt(mapWidth * 0.80); customLegend($("#lX"),layerDefs[0].legendOrder); customLegend($("#lY"),layerDefs[1].legendOrder); //var totFor = map.getLayer(layerDefs[0].valField); initSwipe(); map.on("extent-change",function(){ scaleLegend(); renderMapBasedOnChart(); filterChartBasedOnMap(); updateAllCounters(); });  });  map.on("pan",function(){ swipeTransform(); });  map.on("update-start",function(){ console.log("upstart"); //scaleLegend(); });  map.on("update-end",function(){ swipeTransform(); console.log("upend"); });  });  